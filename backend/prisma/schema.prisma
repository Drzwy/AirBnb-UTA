// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id Int @id @default(autoincrement())

  fechaCreacion      DateTime @default(now())
  fechaActualizacion DateTime @updatedAt
  estaActivo         Boolean  @default(true)

  tipoUsuario UserTypes @default(Cliente)
  email       String    @unique
  hash        String

  run         String @unique
  nombre      String
  apellidoPat String
  apellidoMat String

  descripcion String
  idiomas     String[]
  detalles    String[]

  anfitrionDe Propiedad[] @relation("Es dueño")
  seHospedaEn Hospedaje[] @relation("se hospeda")

  valoracionesAUsuarios    ValoracionUsuario[]   @relation("reseña usuario")
  valoracionesAPropiedades ValoracionPropiedad[] @relation("reseña propiedad")
  valoracionesRecibidas    ValoracionUsuario[]   @relation("usuario criticado")
}

enum UserTypes {
  Cliente
  Administrador
}

model Propiedad {
  id Int @id @default(autoincrement())

  fechaCreacion      DateTime @default(now())
  fechaActualizacion DateTime @updatedAt
  estaActivo         Boolean  @default(true)

  dormitorios       Int
  camas             Int
  banos             Int
  fechasDisponibles DateTime[] @db.Date
  precioNoche       Float

  tipo        String
  descripcion String

  pais    String
  ciudad  String
  calle   String
  nroCasa Int
  nroDpto Int?

  comodidades         String[]
  opcionesDeSeguridad String[]
  opcionesDeLlegada   String[]
  reglas              String[]

  Anfitrion   Usuario @relation(name: "Es dueño", fields: [anfitrionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  anfitrionId Int

  esProvistaA Hospedaje[] @relation(name: "es provista")

  valoracionesRecibidas ValoracionPropiedad[] @relation(name: "propiedad criticada")

  @@unique(name: "ubicacion", [pais, ciudad, calle, nroCasa, nroDpto])
}

model Hospedaje {
  id Int @default(autoincrement())

  fechaCreacion DateTime @default(now())
  estaActivo    Boolean

  fechaIni DateTime @db.Date
  fechaFin DateTime @db.Date

  Huesped     Usuario   @relation(name: "se hospeda", fields: [huespedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  huespedId   Int
  Propiedad   Propiedad @relation(name: "es provista", fields: [propiedadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propiedadId Int

  @@id([id, huespedId, propiedadId])
}

model ValoracionUsuario {
  fechaCreacion DateTime @default(now())
  estaActivo    Boolean

  descripcion String?
  puntuacion  Int

  UsuarioCreador     Usuario @relation(name: "reseña usuario", fields: [usuarioCreadorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuarioCreadorId   Int
  UsuarioCriticado   Usuario @relation(name: "usuario criticado", fields: [usuarioCriticadoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuarioCriticadoId Int

  @@id([usuarioCreadorId, usuarioCriticadoId])
}

model ValoracionPropiedad {
  fechaCreacion DateTime @default(now())
  estaActivo    Boolean

  descripcion String?
  puntuacion  Int

  UsuarioCreador       Usuario   @relation(name: "reseña propiedad", fields: [usuarioCreadorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuarioCreadorId     Int
  PropiedadCriticada   Propiedad @relation(name: "propiedad criticada", fields: [propiedadCriticadaId], references: [id])
  propiedadCriticadaId Int

  @@id([usuarioCreadorId, propiedadCriticadaId])
}
